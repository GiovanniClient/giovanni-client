plugins {
    id 'fabric-loom' version '1.11.4'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.jetbrains.kotlin.jvm' // Shadow plugin
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "giovanniclient" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.notenoughupdates.org/releases/' }
}

configurations {
    shadowModImpl {
        extendsFrom configurations.modImplementation // Remap needed
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // MoulConfig core + annotation processor - NOTE THE ARTIFACT NAME CHANGE
    modImplementation      "org.notenoughupdates.moulconfig:modern-1.21.5:${project.moulconfig_version}"
    shadowModImpl         "org.notenoughupdates.moulconfig:modern-1.21.5:${project.moulconfig_version}"

    // Kotlin stdlib
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}


// Configure shadowJar task to relocate MoulConfig package
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    configurations = [project.configurations.shadowModImpl]
    relocate 'io.github.notenoughupdates.moulconfig', 'giovanniclient.shadowed.moulconfig'
}

// Remap the shadowJar output for Fabric compatibility
tasks.register('remapShadowJar', net.fabricmc.loom.task.RemapJarTask) {
    def shadowJarTask = tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar)

    dependsOn shadowJarTask

    inputFile.set(shadowJarTask.get().archiveFile)
    archiveClassifier.set("shadowed")
    addNestedDependencies.set(true)
    targetNamespace.set("named")
}

// Make the build depend on the remapped shadow JAR
build.dependsOn tasks.remapShadowJar

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
        // Configure publishing repos here if needed
    }
}
kotlin {
    jvmToolchain(21)
}
